{"version":3,"sources":["components/Container/Container.jsx","components/HomeView/HomeView.jsx","redux/selectors.js","components/MainNav/MainNav.jsx","components/AuthNav/AuthNav.jsx","components/UserMenu/avatar.png","redux/actions.js","redux/operations.js","components/UserMenu/UserMenu.jsx","components/AppBar/AppBar.jsx","components/RegisterForm/RegisterForm.jsx","components/LoginForm/LoginForm.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsView/ContactsView.jsx","components/PrivateRoute.js","components/PublicRoute.js","components/App/App.jsx","redux/reducers.js","redux/store.js","index.js"],"names":["Container","children","className","HomeView","getContactsItems","state","contacts","items","selectors","getToken","auth","token","isAuthenticated","getUserName","user","name","getUserEmail","email","getContactsError","error","getContactsLoading","loading","getContactList","createSelector","filter","normalizedFilter","toLowerCase","contact","includes","MainNav","useSelector","to","exact","activeClassName","AuthNav","actions","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateContactRequest","updateContactSuccess","updateContactError","filterContact","axios","defaults","baseURL","headers","common","operations","register","credential","dispatch","post","then","res","data","catch","message","logIn","logOut","getCurrentUser","getState","persistedToken","get","fetchContacts","addContact","deleteContact","id","delete","updateContact","patch","useStyles","makeStyles","button","display","letterSpacing","textTransform","fontSize","UserMenu","useDispatch","classes","src","logo","alt","width","Button","type","size","variant","onClick","AppBar","textField","marginBottom","RegisterForm","useState","setName","setEmail","password","setPassword","handleChange","e","currentTarget","value","onSubmit","preventDefault","trim","alert","autoComplete","TextField","onChange","label","color","LoginForm","container","boxShadow","borderRadius","headRow","backgroundColor","body","bodyRow","headCell","padding","cell","ContactList","useEffect","length","TableContainer","Table","table","aria-label","TableHead","TableRow","TableCell","TableBody","map","number","component","scope","IconButton","ContactForm","setNumber","handleInputChange","existContact","find","isContsctExist","startIcon","Filter","event","target","ContactsView","isLoading","PrivateRoute","Component","redirectTo","routeProps","render","props","PublicRoute","restricted","App","path","initState","createReducer","action","payload","itemContactReducer","filtered","el","filterContactReducer","loadingContactReducer","errotContactReducer","reducers","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","devTools","process","persistore","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"2eAIeA,MAHf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,qBAAKC,UAAU,YAAf,SAA4BD,KCCtBE,MAHf,WACE,OAAO,6D,QCQHC,EAAmB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OA0BlCC,EAXG,CAChBC,SAvBe,SAAAJ,GAAK,OAAIA,EAAMK,KAAKC,OAwBnCC,gBAtBsB,SAAAP,GAAK,OAAIA,EAAMK,KAAKE,iBAuB1CC,YArBkB,SAAAR,GAAK,OAAIA,EAAMK,KAAKI,KAAKC,MAsB3CC,aArBmB,SAAAX,GAAK,OAAIA,EAAMK,KAAKI,KAAKG,OAsB5Cb,mBAEAc,iBApBuB,SAAAb,GAAK,OAAIA,EAAMC,SAASa,OAqB/CC,mBApByB,SAAAf,GAAK,OAAIA,EAAMC,SAASe,SAqBjDC,eAnBqBC,YACrB,CAACnB,EALuB,SAAAC,GAAK,OAAIA,EAAMC,SAASkB,UAMhD,SAACjB,EAAOiB,GACN,IAAMC,EAAmBD,EAAOE,cAEhC,OAAOnB,EAAMiB,QAAO,SAAAG,GAAO,OACzBA,EAAQZ,KAAKW,cAAcE,SAASH,U,OCD3BI,MAff,WACE,IAAMjB,EAAkBkB,YAAYtB,EAAUI,iBAC9C,OACE,sBAAKV,UAAU,UAAf,UACE,cAAC,IAAD,CAAS6B,GAAG,IAAIC,OAAK,EAAC9B,UAAU,OAAO+B,gBAAgB,aAAvD,kBAGCrB,GACC,cAAC,IAAD,CAASmB,GAAG,YAAY7B,UAAU,OAAO+B,gBAAgB,aAAzD,0B,OCEOC,MAZf,WACE,OACE,sBAAKhC,UAAU,UAAf,UACE,cAAC,IAAD,CAAS6B,GAAG,YAAY7B,UAAU,OAAO+B,gBAAgB,aAAzD,sBAGA,cAAC,IAAD,CAASF,GAAG,SAAS7B,UAAU,OAAO+B,gBAAgB,aAAtD,wBCRS,MAA0B,mC,wBC+D1BE,EA3BC,CACdC,gBAnCsBC,YAAa,wBAoCnCC,gBAnCsBD,YAAa,wBAoCnCE,cAnCoBF,YAAa,sBAoCjCG,aAlCmBH,YAAa,qBAmChCI,aAlCmBJ,YAAa,qBAmChCK,WAlCiBL,YAAa,mBAmC9BM,cAjCoBN,YAAa,sBAkCjCO,cAjCoBP,YAAa,sBAkCjCQ,YAjCkBR,YAAa,oBAkC/BS,sBAhC4BT,YAAa,8BAiCzCU,sBAhC4BV,YAAa,8BAiCzCW,oBAhC0BX,YAAa,4BAiCvCY,qBA/B2BZ,YAAa,iCAgCxCa,qBA/B2Bb,YAAa,iCAgCxCc,mBA/ByBd,YAAa,+BAgCtCe,mBA9ByBf,YAAa,+BA+BtCgB,mBA9ByBhB,YAAa,+BA+BtCiB,iBA9BuBjB,YAAa,6BA+BpCkB,qBA7B2BlB,YAAa,iCA8BxCmB,qBA7B2BnB,YAAa,iCA8BxCoB,mBA7ByBpB,YAAa,+BA8BtCqB,qBA5B2BrB,YAAa,iCA6BxCsB,qBA5B2BtB,YAAa,iCA6BxCuB,mBA5ByBvB,YAAa,+BA6BtCwB,cA3BoBxB,YAAa,0BC/BnCyB,IAAMC,SAASC,QAAU,2CACzB,IAAMrD,EAAQ,SACRA,GACFmD,IAAMC,SAASE,QAAQC,OAAvB,+BAA2DvD,IAFzDA,EAAQ,WAKVmD,IAAMC,SAASE,QAAQC,OAAvB,kBA+FWC,EAZI,CACjBC,SAhFe,SAAAC,GAAU,OAAI,SAAAC,GAC7BA,EAASnC,EAAQC,mBACjB0B,IACGS,KAAK,gBAAiBF,GACtBG,MAAK,SAAAC,GACJ9D,EAAU8D,EAAIC,KAAK/D,OACnB2D,EAASnC,EAAQG,gBAAgBmC,EAAIC,UAEtCC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQI,cAAcpB,EAAMyD,eAyEvDC,MAvEY,SAAAR,GAAU,OAAI,SAAAC,GAC1BA,EAASnC,EAAQK,gBACjBsB,IACGS,KAAK,eAAgBF,GACrBG,MAAK,SAAAC,GACJ9D,EAAU8D,EAAIC,KAAK/D,OACnB2D,EAASnC,EAAQM,aAAagC,EAAIC,UAEnCC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQO,WAAWvB,EAAMyD,eAgEpDE,OA9Da,kBAAM,SAAAR,GACnBA,EAASnC,EAAQQ,iBACjBmB,IACGS,KAAK,iBACLC,MAAK,SAAAC,GACJ9D,IACA2D,EAASnC,EAAQS,cAAc6B,EAAIC,UAEpCC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQU,YAAY1B,EAAMyD,eAuDrDG,eArDqB,kBAAM,SAACT,EAAUU,GAAc,IAEnCC,EACbD,IADFtE,KAAQC,MAELsE,IACLtE,EAAUsE,GACVX,EAASnC,EAAQW,yBACjBgB,IACGoB,IAAI,kBACJV,MAAK,SAAAC,GACJH,EAASnC,EAAQY,sBAAsB0B,EAAIC,UAE5CC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQa,oBAAoB7B,EAAMyD,gBA2C7DO,cAtCoB,kBAAM,SAAAb,GAC1BA,EAASnC,EAAQc,wBACjBa,IACGoB,IAAI,aACJV,MAAK,gBAAGE,EAAH,EAAGA,KAAH,OAAcJ,EAASnC,EAAQe,qBAAqBwB,OACzDC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQgB,mBAAmBhC,EAAMyD,eAkC5DQ,WA/BiB,SAAAV,GAAI,OAAI,SAAAJ,GACzBA,EAASnC,EAAQiB,sBACjBU,IACGS,KAAK,YAAaG,GAClBF,MAAK,gBAAGE,EAAH,EAAGA,KAAH,OAAcJ,EAASnC,EAAQkB,mBAAmBqB,OACvDC,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQmB,iBAAiBnC,EAAMyD,eA2B1DS,cAxBoB,SAAAC,GAAE,OAAI,SAAAhB,GAC1BA,EAASnC,EAAQoB,wBACjBO,IACGyB,OADH,oBACuBD,IACpBd,MAAK,kBAAMF,EAASnC,EAAQqB,qBAAqB8B,OACjDX,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQsB,mBAAmBtC,EAAMyD,eAoB5DY,cAjBoB,SAAAF,GAAE,OAAI,SAAAhB,GAC1BA,EAASnC,EAAQuB,wBACjBI,IACG2B,MADH,oBACsBH,IACnBd,MAAK,kBAAMF,EAASnC,EAAQwB,qBAAqB2B,OACjDX,OAAM,SAAAxD,GAAK,OAAImD,EAASnC,EAAQyB,mBAAmBzC,EAAMyD,gB,2BChFxDc,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,QAAS,QACTC,cAAe,MACfC,cAAe,OACfC,SAAU,UA8BCC,MA1Bf,WACE,IAAMlF,EAAOe,YAAYtB,EAAUK,aAC7BI,EAAQa,YAAYtB,EAAUQ,cAE9BsD,EAAW4B,cAEXC,EAAUT,IAEhB,OACE,sBAAKxF,UAAU,WAAf,UACE,qBAAKkG,IAAKC,EAAMC,IAAI,GAAGC,MAAM,KAAKrG,UAAU,eAC5C,uBAAMA,UAAU,WAAhB,sBACW,4BAAIa,IADf,gBAC+BE,EAD/B,QAGA,cAACuF,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,QACLC,QAAQ,YACRC,QAAS,kBAAMtC,EAASH,EAAWW,WACnC5E,UAAWiG,EAAQP,OALrB,wB,OCfSiB,MAVf,WACE,IAAMjG,EAAkBkB,YAAYtB,EAAUI,iBAC9C,OACE,sBAAKV,UAAU,SAAf,UACE,cAAC,EAAD,IAECU,EAAkB,cAAC,EAAD,IAAe,cAAC,EAAD,Q,0BCJlC8E,EAAYC,YAAW,CAC3BmB,UAAW,CACTC,aAAc,QAEhBnB,OAAQ,CACNC,QAAS,QACTC,cAAe,SAwFJkB,MApFf,WAAyB,IAAD,EACEC,mBAAS,IADX,mBACflG,EADe,KACTmG,EADS,OAEID,mBAAS,IAFb,mBAEfhG,EAFe,KAERkG,EAFQ,OAGUF,mBAAS,IAHnB,mBAGfG,EAHe,KAGLC,EAHK,KAIhB/C,EAAW4B,cAEXoB,EAAe,SAAAC,GACnB,OAAQA,EAAEC,cAAczG,MACtB,IAAK,OACHmG,EAAQK,EAAEC,cAAcC,OACxB,MACF,IAAK,QACHN,EAASI,EAAEC,cAAcC,OACzB,MACF,IAAK,WACHJ,EAAYE,EAAEC,cAAcC,OAC5B,MACF,QACE,SAeAtB,EAAUT,IAEhB,OACE,qCACE,+CAEA,uBAAMgC,SAlBW,SAAAH,GACnBA,EAAEI,iBACkB,KAAhB5G,EAAK6G,QAAkC,KAAjB3G,EAAM2G,QAAqC,KAApBR,EAASQ,QAI1DtD,EAASH,EAAWC,SAAS,CAAErD,OAAME,QAAOmG,cAC5CF,EAAQ,IACRC,EAAS,IACTE,EAAY,KANVQ,MAAM,qBAewB3H,UAAU,UAAU4H,aAAa,MAA/D,UACE,cAACC,EAAA,EAAD,CACEtB,KAAK,OACL1F,KAAK,OACL0G,MAAO1G,EACPiH,SAAUV,EACVpH,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,OACNtB,QAAQ,aAGV,cAACoB,EAAA,EAAD,CACEtB,KAAK,QACL1F,KAAK,QACL0G,MAAOxG,EACP+G,SAAUV,EACVpH,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,SACNtB,QAAQ,aAEV,cAACoB,EAAA,EAAD,CACEtB,KAAK,WACL1F,KAAK,WACL0G,MAAOL,EACPY,SAAUV,EACVpH,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,WACNtB,QAAQ,aAEV,cAACH,EAAA,EAAD,CACEtG,UAAWiG,EAAQP,OACnBc,KAAK,QACLC,QAAQ,YACRuB,MAAM,UACNzB,KAAK,SALP,6BCjFFf,G,OAAYC,YAAW,CAC3BmB,UAAW,CACTC,aAAc,QAEhBnB,OAAQ,CACNC,QAAS,QACTC,cAAe,UAwEJqC,MApEf,WAAsB,IAAD,EACOlB,mBAAS,IADhB,mBACZhG,EADY,KACLkG,EADK,OAEaF,mBAAS,IAFtB,mBAEZG,EAFY,KAEFC,EAFE,KAGb/C,EAAW4B,cAEXoB,EAAe,SAAAC,GACnB,OAAQA,EAAEC,cAAczG,MACtB,IAAK,QACHoG,EAASI,EAAEC,cAAcC,OACzB,MACF,IAAK,WACHJ,EAAYE,EAAEC,cAAcC,OAC5B,MACF,QACE,SAcAtB,EAAUT,IAEhB,OACE,qCACE,4CACA,uBAAMgC,SAhBW,SAAAH,GACnBA,EAAEI,iBACmB,KAAjB1G,EAAM2G,QAAqC,KAApBR,EAASQ,QAIpCtD,EAASH,EAAWU,MAAM,CAAE5D,QAAOmG,cACnCD,EAAS,IACTE,EAAY,KALVQ,MAAM,qBAawB3H,UAAU,UAAU4H,aAAa,MAA/D,UACE,cAACC,EAAA,EAAD,CACEtB,KAAK,QACL1F,KAAK,QACL0G,MAAOxG,EACP+G,SAAUV,EACVpH,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,SACNtB,QAAQ,aAGV,cAACoB,EAAA,EAAD,CACEtB,KAAK,WACL1F,KAAK,WACL0G,MAAOL,EACPY,SAAUV,EACVpH,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,WACNtB,QAAQ,aAEV,cAACH,EAAA,EAAD,CACEtG,UAAWiG,EAAQP,OACnBc,KAAK,QACLC,QAAQ,YACRuB,MAAM,UACNzB,KAAK,SALP,0B,yFCxDFf,EAAYC,YAAW,CAC3ByC,UAAW,CACTC,UACE,uGACFC,aAAc,MACd/B,MAAO,KAETgC,QAAS,CACPC,gBAAiB,WAEnBC,KAAM,CACJ,aAAc,CACZD,gBAAiB,oBAGrBE,QAAS,GACTC,SAAU,CACRC,QAAS,GACTV,MAAO,QACPnC,cAAe,YACfD,cAAe,GAEjB+C,KAAM,CACJD,QAAS,MA4DEE,EAxDK,WAClB,IAAMxE,EAAW4B,cAEX5F,EAAWwB,YAAYtB,EAAUc,gBAEvCyH,qBAAU,WACJzI,EAAS0I,QACb1E,EAASH,EAAWgB,mBAEnB,IAEH,IAAMgB,EAAUT,IAEhB,OACE,cAACuD,EAAA,EAAD,CAAgB/I,UAAWiG,EAAQiC,UAAnC,SACE,eAACc,EAAA,EAAD,CAAOhJ,UAAWiG,EAAQgD,MAAOC,aAAW,mBAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAUpJ,UAAWiG,EAAQoC,QAA7B,UACE,cAACgB,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQwC,SAA9B,kBACA,cAACY,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQwC,SAA9B,oBACA,cAACY,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQwC,SAA9B,yBAGJ,cAACa,EAAA,EAAD,CAAWtJ,UAAWiG,EAAQsC,KAA9B,SACGnI,GACCA,EAASmJ,KAAI,gBAAG1I,EAAH,EAAGA,KAAM2I,EAAT,EAASA,OAAQpE,EAAjB,EAAiBA,GAAjB,OACX,eAACgE,EAAA,EAAD,CAAUpJ,UAAWiG,EAAQuC,QAA7B,UACE,cAACa,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQ0C,KAAMc,UAAU,KAAKC,MAAM,MAAzD,SACG7I,IAEH,cAACwI,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQ0C,KAA9B,SAAqCa,IACrC,cAACH,EAAA,EAAD,CAAWrJ,UAAWiG,EAAQ0C,KAA9B,SACE,cAACgB,EAAA,EAAD,CACEjD,QAAS,kBAAMtC,EAASH,EAAWkB,cAAcC,KACjD8D,aAAW,SACX1C,KAAK,QAHP,SAKE,cAAC,IAAD,UAXqCpB,c,0BC5DnDI,EAAYC,YAAW,CAC3BmB,UAAW,CACTC,aAAc,UAsFH+C,MAlFf,WACE,IAAMxF,EAAW4B,cADI,EAEGe,mBAAS,IAFZ,mBAEdlG,EAFc,KAERmG,EAFQ,OAGOD,mBAAS,IAHhB,mBAGdyC,EAHc,KAGNK,EAHM,KAIfC,EAAoB,SAAAzC,GAAM,IAAD,EACLA,EAAEC,cAAlBzG,EADqB,EACrBA,KAAM0G,EADe,EACfA,MAEd,OAAQ1G,GACN,IAAK,OACHmG,EAAQO,GACR,MACF,IAAK,SACHsC,EAAUtC,GACV,MACF,QACE,SAIAnH,EAAWwB,aAAY,SAAAzB,GAAK,OAAIG,EAAUJ,iBAAiBC,MAyB3D8F,EAAUT,IAEhB,OACE,uBAAMxF,UAAU,OAAOwH,SAnBJ,SAAAH,GAEnB,GADAA,EAAEI,iBACkB,KAAhB5G,EAAK6G,QAAmC,KAAlB8B,EAAO9B,OAAjC,CAIA,IAAMqC,EAbe,WACrB,IAAMxI,EAAmBV,EAAKW,cAC9B,OAAOpB,EAAS4J,MACd,SAAAvI,GAAO,OAAIA,EAAQZ,KAAKW,gBAAkBD,KAUvB0I,GACjBF,EACFpC,MAAM,GAAD,OAAIoC,EAAalJ,KAAjB,8BAGPuD,EAASH,EAAWiB,WAAW,CAAErE,OAAM2I,YACvCxC,EAAQ,IACR6C,EAAU,UAVRlC,MAAM,qBAgBR,UACE,cAACE,EAAA,EAAD,CACEtB,KAAK,OACL1F,KAAK,OACL0G,MAAO1G,EACPiH,SAAUgC,EACV9J,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,OACNtB,QAAQ,aAGV,cAACoB,EAAA,EAAD,CACEtB,KAAK,OACL1F,KAAK,SACL0G,MAAOiC,EACP1B,SAAUgC,EACV9J,UAAWiG,EAAQW,UACnBJ,KAAK,QACLuB,MAAM,SACNtB,QAAQ,aAEV,cAACH,EAAA,EAAD,CACEC,KAAK,SACLE,QAAQ,YACRuB,MAAM,UACNxB,KAAK,QACL0D,UAAW,cAAC,IAAD,IALb,6BChFA1E,EAAYC,YAAW,CAC3BnE,OAAQ,CACNuF,aAAc,MAyBHsD,GArBA,WACb,IAAM/F,EAAW4B,cAIXC,EAAUT,IAEhB,OACE,cAACqC,EAAA,EAAD,CACE7H,UAAWiG,EAAQ3E,OACnBsG,aAAa,MACbrB,KAAK,OACL1F,KAAK,SACLiH,SAVa,SAAAsC,GAAK,OAAIhG,EAASnC,EAAQ0B,cAAcyG,EAAMC,OAAO9C,SAWlEf,KAAK,QACLuB,MAAM,uBACNtB,QAAQ,cCRC6D,OAff,WACE,IAAMrJ,EAAQW,aAAY,SAAAzB,GAAK,OAAIG,EAAUU,iBAAiBb,MACxDoK,EAAY3I,aAAY,SAAAzB,GAAK,OAAIG,EAAUY,mBAAmBf,MACpE,OACE,qCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,GAAD,IACCoK,GAAa,4BAAI,iBACjBtJ,GAAS,4BAAI,iCAAmCA,IACjD,cAAC,EAAD,Q,kBCSSuJ,GAhBM,SAAC,GAAyD,IAA5CC,EAA2C,EAAtDhB,UAAsBiB,EAAgC,EAAhCA,WAAeC,EAAiB,2CACtEjK,EAAkBkB,YAAYtB,EAAUI,iBAC9C,OACE,cAAC,IAAD,6BACMiK,GADN,IAEEC,OAAQ,SAAAC,GAAK,OACXnK,EACE,cAAC+J,EAAD,gBAAeI,IAEf,cAAC,IAAD,CAAUhJ,GAAI6I,SCOTI,GAhBK,SAAC,GAAyD,IAA5CL,EAA2C,EAAtDhB,UAAsBiB,EAAgC,EAAhCA,WAAeC,EAAiB,2CACrEjK,EAAkBkB,YAAYtB,EAAUI,iBAC9C,OACE,cAAC,IAAD,6BACMiK,GADN,IAEEC,OAAQ,SAAAC,GAAK,OACXnK,GAAmBiK,EAAWI,WAC5B,cAAC,IAAD,CAAUlJ,GAAI6I,IAEd,cAACD,EAAD,gBAAeI,SC8BVG,I,qBAAAA,GAjCf,WACE,IAAM5G,EAAW4B,cAKjB,OAJA6C,qBAAU,WACRzE,EAASH,EAAWY,oBAEnB,IAED,eAAC,EAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,GAAD,CAAaoG,KAAK,IAAInJ,OAAK,EAAC2H,UAAWxJ,IACvC,cAAC,GAAD,CACEgL,KAAK,YACLxB,UAAW3C,EACXiE,YAAU,EACVL,WAAW,cAEb,cAAC,GAAD,CACEO,KAAK,SACLxB,UAAWxB,EACX8C,YAAU,EACVL,WAAW,cAEb,cAAC,GAAD,CACEO,KAAK,YACLxB,UAAWa,GACXI,WAAW,kB,uDCrCfQ,GAAY,CAAErK,KAAM,KAAME,MAAO,MACjCH,GAAOuK,YAAcD,IAAD,sBACvBjJ,EAAQG,gBAAgBmE,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,QAAQzK,QAD1C,gBAEvBqB,EAAQM,aAAagE,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,QAAQzK,QAFvC,gBAGvBqB,EAAQS,cAAc6D,MAAO,kBAAM2E,MAHZ,gBAIvBjJ,EAAQY,sBAAsB0D,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAJxC,KAMpB5K,GAAQ0K,YAAc,MAAD,sBACxBlJ,EAAQG,gBAAgBmE,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,QAAQ5K,SADzC,gBAExBwB,EAAQM,aAAagE,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,QAAQ5K,SAFtC,gBAGxBwB,EAAQS,cAAc6D,MAAO,kBAAM,QAHX,KAKrBtF,GAAQkK,YAAc,MAAD,sBACxBlJ,EAAQI,cAAckE,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAD/B,gBAExBpJ,EAAQO,WAAW+D,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAF5B,gBAGxBpJ,EAAQU,YAAY4D,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAH7B,gBAIxBpJ,EAAQa,oBAAoByD,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAJrC,KAOrB3K,GAAkByK,aAAc,GAAD,sBAClClJ,EAAQG,gBAAgBmE,MAAO,kBAAM,KADH,gBAElCtE,EAAQM,aAAagE,MAAO,kBAAM,KAFA,gBAGlCtE,EAAQY,sBAAsB0D,MAAO,kBAAM,KAHT,gBAIlCtE,EAAQS,cAAc6D,MAAO,kBAAM,KAJD,gBAKlCtE,EAAQI,cAAckE,MAAO,kBAAM,KALD,gBAMlCtE,EAAQO,WAAW+D,MAAO,kBAAM,KANE,gBAOlCtE,EAAQa,oBAAoByD,MAAO,kBAAM,KAPP,KAY/B+E,GAAqBH,YAAc,IAAD,sBACrClJ,EAAQe,qBAAqBuD,MAAO,SAACpG,EAAO8B,GAAR,OAAoBA,EAAQoJ,WAD3B,gBAErCpJ,EAAQkB,mBAAmBoD,MAAO,SAACpG,EAAOiL,GAAR,6BAC9BjL,GAD8B,CAEjCiL,EAAOC,aAJ6B,gBAMrCpJ,EAAQqB,qBAAqBiD,MAAO,SAACpG,EAAOiL,GAC3C,IAAMG,EAAWpL,EAAMmB,QAAO,SAAAkK,GAAE,OAAIA,EAAGpG,KAAOgG,EAAOC,WACrD,OAAO,aAAIE,MARyB,gBAUrCtJ,EAAQS,cAAc6D,MAAO,iBAAM,MAVE,KAalCkF,GAAuBN,YAAc,GAAD,gBACvClJ,EAAQ0B,cAAc4C,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,YAGpDK,GAAwBP,aAAc,GAAD,sBACxClJ,EAAQc,qBAAqBwD,MAAO,kBAAM,KADF,gBAExCtE,EAAQe,qBAAqBuD,MAAO,kBAAM,KAFF,gBAGxCtE,EAAQgB,mBAAmBsD,MAAO,kBAAM,KAHA,gBAIxCtE,EAAQiB,mBAAmBqD,MAAO,kBAAM,KAJA,gBAKxCtE,EAAQkB,mBAAmBoD,MAAO,kBAAM,KALA,gBAMxCtE,EAAQmB,iBAAiBmD,MAAO,kBAAM,KANE,gBAOxCtE,EAAQoB,qBAAqBkD,MAAO,kBAAM,KAPF,gBAQxCtE,EAAQqB,qBAAqBiD,MAAO,kBAAM,KARF,gBASxCtE,EAAQsB,mBAAmBgD,MAAO,kBAAM,KATA,KAYrCoF,GAAsBR,YAAc,IAAD,sBACtClJ,EAAQgB,mBAAmBsD,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WADtB,gBAEtCpJ,EAAQmB,iBAAiBmD,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAFpB,gBAGtCpJ,EAAQsB,mBAAmBgD,MAAO,SAACpG,EAAOiL,GAAR,OAAmBA,EAAOC,WAHtB,gBAItCpJ,EAAQc,qBAAqBwD,MAAO,iBAAM,MAJJ,gBAKtCtE,EAAQiB,mBAAmBqD,MAAO,iBAAM,MALF,gBAMtCtE,EAAQoB,qBAAqBkD,MAAO,iBAAM,MANJ,KAuB1BqF,GADE,CAAExL,SAbFyL,aAAgB,CAC/BxL,MAAOiL,GACPhK,OAAQmK,GACRtK,QAASuK,GACTzK,MAAO0K,KASoBnL,KAPhBqL,aAAgB,CAC3BjL,QACAF,mBACAD,SACAQ,YCpEI6K,GAAU,aACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAK1DC,GAAoB,CACxBC,IAAK,OACLC,aACAC,UAAW,CAAC,UAGRC,GAAQC,YAAe,CAC3BC,QAAS,CACP1M,SAAUwL,GAASxL,SACnBI,KAAMuM,aAAeP,GAAmBZ,GAASpL,OAEnDsL,cACAkB,UAAUC,IAMGC,GADI,CAAEN,SAAOO,UAFVC,aAAaR,KC7B/BS,IAASzC,OACP,cAAC,IAAM0C,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAMA,MAAvB,SACE,cAAC,IAAD,CAAazL,QAAS,KAAMgM,UAAWP,GAAMO,UAA7C,SACE,cAAC,IAAD,UACE,cAAC,GAAD,YAKRI,SAASC,eAAe,W","file":"static/js/main.6dd0c745.chunk.js","sourcesContent":["import './Container.css';\nfunction Container({ children }) {\n  return <div className=\"Container\">{children}</div>;\n}\nexport default Container;\n","function HomeView() {\n  return <h1> Contact Service Home Page</h1>;\n}\nexport default HomeView;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getToken = state => state.auth.token;\n\nconst isAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUserName = state => state.auth.user.name;\nconst getUserEmail = state => state.auth.user.email;\n\nconst getContactsItems = state => state.contacts.items;\nconst getContactsFilter = state => state.contacts.filter;\nconst getContactsError = state => state.contacts.error;\nconst getContactsLoading = state => state.contacts.loading;\n\nconst getContactList = createSelector(\n  [getContactsItems, getContactsFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\nconst selectors = {\n  getToken,\n  isAuthenticated,\n  getUserName,\n  getUserEmail,\n  getContactsItems,\n  // getContactsFilter,\n  getContactsError,\n  getContactsLoading,\n  getContactList,\n};\nexport default selectors;\n","import { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport selectors from '../../redux/selectors';\nimport './MainNav.css';\nfunction MainNav() {\n  const isAuthenticated = useSelector(selectors.isAuthenticated);\n  return (\n    <nav className=\"mainNav\">\n      <NavLink to=\"/\" exact className=\"link\" activeClassName=\"activeLink\">\n        Main\n      </NavLink>\n      {isAuthenticated && (\n        <NavLink to=\"/contacts\" className=\"link\" activeClassName=\"activeLink\">\n          Contacts\n        </NavLink>\n      )}\n    </nav>\n  );\n}\nexport default MainNav;\n","import { NavLink } from 'react-router-dom';\nimport './AuthNav.css';\nfunction AuthNav() {\n  return (\n    <div className=\"authNav\">\n      <NavLink to=\"/register\" className=\"link\" activeClassName=\"activeLink\">\n        Register\n      </NavLink>\n      <NavLink to=\"/login\" className=\"link\" activeClassName=\"activeLink\">\n        Log In\n      </NavLink>\n    </div>\n  );\n}\nexport default AuthNav;\n","export default __webpack_public_path__ + \"static/media/avatar.138b15d2.png\";","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nconst fetchContactsError = createAction('contacts/fetchContactsError');\n\nconst addContactsRequest = createAction('contacts/addContactsRequest');\nconst addContactsSuccess = createAction('contacts/addContactsSuccess');\nconst addContactsError = createAction('contacts/addContactsError');\n\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nconst deleteContactError = createAction('contacts/deleteContactError');\n\nconst updateContactRequest = createAction('contacts/updateContactRequest');\nconst updateContactSuccess = createAction('contacts/updateContactSuccess');\nconst updateContactError = createAction('contacts/updateContactError');\n\nconst filterContact = createAction('contacts/changeFilter');\n\nconst actions = {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  updateContactRequest,\n  updateContactSuccess,\n  updateContactError,\n  filterContact,\n};\nexport default actions;\n","import axios from 'axios';\nimport actions from './actions';\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common['Authorization'] = ``;\n  },\n};\n\nconst register = credential => dispatch => {\n  dispatch(actions.registerRequest());\n  axios\n    .post('/users/signup', credential)\n    .then(res => {\n      token.set(res.data.token);\n      dispatch(actions.registerSuccess(res.data));\n    })\n    .catch(error => dispatch(actions.registerError(error.message)));\n};\nconst logIn = credential => dispatch => {\n  dispatch(actions.loginRequest());\n  axios\n    .post('/users/login', credential)\n    .then(res => {\n      token.set(res.data.token);\n      dispatch(actions.loginSuccess(res.data));\n    })\n    .catch(error => dispatch(actions.loginError(error.message)));\n};\nconst logOut = () => dispatch => {\n  dispatch(actions.logoutRequest());\n  axios\n    .post('/users/logout')\n    .then(res => {\n      token.unset();\n      dispatch(actions.logoutSuccess(res.data));\n    })\n    .catch(error => dispatch(actions.logoutError(error.message)));\n};\nconst getCurrentUser = () => (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n  if (!persistedToken) return;\n  token.set(persistedToken);\n  dispatch(actions.getCurrentUserRequest());\n  axios\n    .get('/users/current')\n    .then(res => {\n      dispatch(actions.getCurrentUserSuccess(res.data));\n    })\n    .catch(error => dispatch(actions.getCurrentUserError(error.message)));\n};\n\n//-----------\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error.message)));\n};\n\nconst addContact = data => dispatch => {\n  dispatch(actions.addContactsRequest());\n  axios\n    .post('/contacts', data)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactsError(error.message)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactError(error.message)));\n};\n\nconst updateContact = id => dispatch => {\n  dispatch(actions.updateContactRequest());\n  axios\n    .patch(`/contacts/${id}`)\n    .then(() => dispatch(actions.updateContactSuccess(id)))\n    .catch(error => dispatch(actions.updateContactError(error.message)));\n};\n\nconst operations = {\n  register,\n  logIn,\n  logOut,\n  getCurrentUser,\n  //---,\n  fetchContacts,\n  addContact,\n  deleteContact,\n  updateContact,\n};\n\nexport default operations;\n","import { useDispatch, useSelector } from 'react-redux';\nimport logo from './avatar.png';\nimport selectors from '../../redux/selectors';\nimport operations from '../../redux/operations';\nimport './UserMenu.css';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  button: {\n    display: 'block',\n    letterSpacing: '1px',\n    textTransform: 'none',\n    fontSize: '14px',\n  },\n});\n\nfunction UserMenu() {\n  const name = useSelector(selectors.getUserName);\n  const email = useSelector(selectors.getUserEmail);\n\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"userMenu\">\n      <img src={logo} alt=\"\" width=\"32\" className=\"userAvatar\" />\n      <span className=\"userName\">\n        Welcome, <b>{name}</b> {` (${email})`}\n      </span>\n      <Button\n        type=\"button\"\n        size=\"small\"\n        variant=\"contained\"\n        onClick={() => dispatch(operations.logOut())}\n        className={classes.button}\n      >\n        Logout\n      </Button>\n    </div>\n  );\n}\nexport default UserMenu;\n","import { useSelector } from 'react-redux';\nimport MainNav from '../MainNav';\nimport AuthNav from '../AuthNav';\nimport UserMenu from '../UserMenu';\nimport selectors from '../../redux/selectors';\nimport './AppBar.css';\n\nfunction AppBar() {\n  const isAuthenticated = useSelector(selectors.isAuthenticated);\n  return (\n    <div className=\"AppBar\">\n      <MainNav />\n\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\n    </div>\n  );\n}\nexport default AppBar;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport './RegisterForm.css';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  textField: {\n    marginBottom: '15px',\n  },\n  button: {\n    display: 'block',\n    letterSpacing: '1px',\n  },\n});\n\nfunction RegisterForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value);\n        break;\n      case 'email':\n        setEmail(e.currentTarget.value);\n        break;\n      case 'password':\n        setPassword(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || email.trim() === '' || password.trim() === '') {\n      alert('Fill all fields!');\n      return;\n    }\n    dispatch(operations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <h1>Register Page</h1>\n\n      <form onSubmit={handleSubmit} className=\"regForm\" autoComplete=\"off\">\n        <TextField\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          className={classes.textField}\n          size=\"small\"\n          label=\"Name\"\n          variant=\"outlined\"\n        />\n\n        <TextField\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n          className={classes.textField}\n          size=\"small\"\n          label=\"E-mail\"\n          variant=\"outlined\"\n        />\n        <TextField\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          className={classes.textField}\n          size=\"small\"\n          label=\"Password\"\n          variant=\"outlined\"\n        />\n        <Button\n          className={classes.button}\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Register\n        </Button>\n      </form>\n    </>\n  );\n}\nexport default RegisterForm;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport './LoginForm.css';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  textField: {\n    marginBottom: '15px',\n  },\n  button: {\n    display: 'block',\n    letterSpacing: '1px',\n  },\n});\n\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'email':\n        setEmail(e.currentTarget.value);\n        break;\n      case 'password':\n        setPassword(e.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (email.trim() === '' || password.trim() === '') {\n      alert('Fill all fields!');\n      return;\n    }\n    dispatch(operations.logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <h1>Login Page</h1>\n      <form onSubmit={handleSubmit} className=\"logForm\" autoComplete=\"off\">\n        <TextField\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n          className={classes.textField}\n          size=\"small\"\n          label=\"E-mail\"\n          variant=\"outlined\"\n        />\n\n        <TextField\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          className={classes.textField}\n          size=\"small\"\n          label=\"Password\"\n          variant=\"outlined\"\n        />\n        <Button\n          className={classes.button}\n          size=\"small\"\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Login\n        </Button>\n      </form>\n    </>\n  );\n}\nexport default LoginForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport selectors from '../../redux/selectors';\nimport './ContactList.css';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles({\n  container: {\n    boxShadow:\n      '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\n    borderRadius: '4px',\n    width: 500,\n  },\n  headRow: {\n    backgroundColor: '#3f51b5',\n  },\n  body: {\n    '& tr:hover': {\n      backgroundColor: 'rgba(0,0,0,0.1)',\n    },\n  },\n  bodyRow: {},\n  headCell: {\n    padding: 10,\n    color: 'white',\n    textTransform: 'uppercase',\n    letterSpacing: 1,\n  },\n  cell: {\n    padding: 10,\n  },\n});\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectors.getContactList);\n\n  useEffect(() => {\n    if (contacts.length) return;\n    dispatch(operations.fetchContacts());\n    //eslint-disable-next-line\n  }, []);\n\n  const classes = useStyles();\n\n  return (\n    <TableContainer className={classes.container}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow className={classes.headRow}>\n            <TableCell className={classes.headCell}>Name</TableCell>\n            <TableCell className={classes.headCell}>Number</TableCell>\n            <TableCell className={classes.headCell}>Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.body}>\n          {contacts &&\n            contacts.map(({ name, number, id }) => (\n              <TableRow className={classes.bodyRow} key={id}>\n                <TableCell className={classes.cell} component=\"td\" scope=\"row\">\n                  {name}\n                </TableCell>\n                <TableCell className={classes.cell}>{number}</TableCell>\n                <TableCell className={classes.cell}>\n                  <IconButton\n                    onClick={() => dispatch(operations.deleteContact(id))}\n                    aria-label=\"delete\"\n                    size=\"small\"\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport operations from '../../redux/operations';\nimport selectors from '../../redux/selectors';\nimport './ContactForm.css';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  textField: {\n    marginBottom: '15px',\n  },\n});\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const contacts = useSelector(state => selectors.getContactsItems(state));\n\n  const isContsctExist = () => {\n    const normalizedFilter = name.toLowerCase();\n    return contacts.find(\n      contact => contact.name.toLowerCase() === normalizedFilter,\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') {\n      alert('Fill all fields!');\n      return;\n    }\n    const existContact = isContsctExist();\n    if (existContact) {\n      alert(`${existContact.name} is already in contacts.`);\n      return;\n    }\n    dispatch(operations.addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const classes = useStyles();\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <TextField\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n        className={classes.textField}\n        size=\"small\"\n        label=\"Name\"\n        variant=\"outlined\"\n      />\n\n      <TextField\n        type=\"text\"\n        name=\"number\"\n        value={number}\n        onChange={handleInputChange}\n        className={classes.textField}\n        size=\"small\"\n        label=\"Number\"\n        variant=\"outlined\"\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        startIcon={<SaveIcon />}\n      >\n        add contact\n      </Button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport actions from '../../redux/actions';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles({\n  filter: {\n    marginBottom: 15,\n  },\n});\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onFilter = event => dispatch(actions.filterContact(event.target.value));\n\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.filter}\n      autoComplete=\"off\"\n      type=\"text\"\n      name=\"filter\"\n      onChange={onFilter}\n      size=\"small\"\n      label=\"Find contact by Name\"\n      variant=\"outlined\"\n    />\n  );\n};\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport selectors from '../../redux/selectors';\nfunction ContactsView() {\n  const error = useSelector(state => selectors.getContactsError(state));\n  const isLoading = useSelector(state => selectors.getContactsLoading(state));\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && <p>{' Loading... '}</p>}\n      {error && <p>{' Sorry, something goes wrong: ' + error}</p>}\n      <ContactList />\n    </>\n  );\n}\nexport default ContactsView;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport selectors from '../redux/selectors';\n\n/**\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\n * - В противном случае рендерит Redirect на /login\n */\nconst PrivateRoute = ({ component: Component, redirectTo, ...routeProps }) => {\n  const isAuthenticated = useSelector(selectors.isAuthenticated);\n  return (\n    <Route\n      {...routeProps}\n      render={props =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={redirectTo} />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport selectors from '../redux/selectors';\n\n/**\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /contacts\n * - В противном случае рендерит компонент\n */\nconst PublicRoute = ({ component: Component, redirectTo, ...routeProps }) => {\n  const isAuthenticated = useSelector(selectors.isAuthenticated);\n  return (\n    <Route\n      {...routeProps}\n      render={props =>\n        isAuthenticated && routeProps.restricted ? (\n          <Redirect to={redirectTo} />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","import { Switch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport './App.css';\nimport Container from '../Container';\nimport HomeView from '../HomeView';\nimport AppBar from '../AppBar';\nimport RegisterForm from '../RegisterForm';\nimport LoginForm from '../LoginForm';\nimport ContactsView from '../ContactsView';\nimport PrivateRoute from '../../components/PrivateRoute';\nimport PublicRoute from '../../components/PublicRoute';\n\nimport operations from '../../redux/operations';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(operations.getCurrentUser());\n    //eslint-disable-next-line\n  }, []);\n  return (\n    <Container>\n      <AppBar />\n      <Switch>\n        <PublicRoute path=\"/\" exact component={HomeView} />\n        <PublicRoute\n          path=\"/register\"\n          component={RegisterForm}\n          restricted\n          redirectTo=\"/contacts\"\n        />\n        <PublicRoute\n          path=\"/login\"\n          component={LoginForm}\n          restricted\n          redirectTo=\"/contacts\"\n        />\n        <PrivateRoute\n          path=\"/contacts\"\n          component={ContactsView}\n          redirectTo=\"/login\"\n        />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport actions from './actions';\n\nconst initState = { name: null, email: null };\nconst user = createReducer(initState, {\n  [actions.registerSuccess.type]: (state, action) => action.payload.user,\n  [actions.loginSuccess.type]: (state, action) => action.payload.user,\n  [actions.logoutSuccess.type]: () => initState,\n  [actions.getCurrentUserSuccess.type]: (state, action) => action.payload,\n});\nconst token = createReducer(null, {\n  [actions.registerSuccess.type]: (state, action) => action.payload.token,\n  [actions.loginSuccess.type]: (state, action) => action.payload.token,\n  [actions.logoutSuccess.type]: () => null,\n});\nconst error = createReducer(null, {\n  [actions.registerError.type]: (state, action) => action.payload,\n  [actions.loginError.type]: (state, action) => action.payload,\n  [actions.logoutError.type]: (state, action) => action.payload,\n  [actions.getCurrentUserError.type]: (state, action) => action.payload,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [actions.registerSuccess.type]: () => true,\n  [actions.loginSuccess.type]: () => true,\n  [actions.getCurrentUserSuccess.type]: () => true,\n  [actions.logoutSuccess.type]: () => false,\n  [actions.registerError.type]: () => false,\n  [actions.loginError.type]: () => false,\n  [actions.getCurrentUserError.type]: () => false,\n});\n\n//------------\n\nconst itemContactReducer = createReducer([], {\n  [actions.fetchContactsSuccess.type]: (state, actions) => actions.payload,\n  [actions.addContactsSuccess.type]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [actions.deleteContactSuccess.type]: (state, action) => {\n    const filtered = state.filter(el => el.id !== action.payload);\n    return [...filtered];\n  },\n  [actions.logoutSuccess.type]: () => [],\n});\n\nconst filterContactReducer = createReducer('', {\n  [actions.filterContact.type]: (state, action) => action.payload,\n});\n\nconst loadingContactReducer = createReducer(false, {\n  [actions.fetchContactsRequest.type]: () => true,\n  [actions.fetchContactsSuccess.type]: () => false,\n  [actions.fetchContactsError.type]: () => false,\n  [actions.addContactsRequest.type]: () => true,\n  [actions.addContactsSuccess.type]: () => false,\n  [actions.addContactsError.type]: () => false,\n  [actions.deleteContactRequest.type]: () => true,\n  [actions.deleteContactSuccess.type]: () => false,\n  [actions.deleteContactError.type]: () => false,\n});\n\nconst errotContactReducer = createReducer('', {\n  [actions.fetchContactsError.type]: (state, action) => action.payload,\n  [actions.addContactsError.type]: (state, action) => action.payload,\n  [actions.deleteContactError.type]: (state, action) => action.payload,\n  [actions.fetchContactsRequest.type]: () => '',\n  [actions.addContactsRequest.type]: () => '',\n  [actions.deleteContactRequest.type]: () => '',\n});\n\nconst contacts = combineReducers({\n  items: itemContactReducer,\n  filter: filterContactReducer,\n  loading: loadingContactReducer,\n  error: errotContactReducer,\n});\nconst auth = combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});\n\nconst reducers = { contacts, auth };\nexport default reducers;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport reducers from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: reducers.contacts,\n    auth: persistReducer(authPersistConfig, reducers.auth),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nconst persistor = persistStore(store);\n\nconst persistore = { store, persistor };\nexport default persistore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './components/App/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}